
plugins {
    id 'com.google.protobuf' version '0.9.4'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'idea'
    id 'application'
    id 'com.github.ben-manes.versions' version '0.51.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

description = 'Ad Service'
group = "ad"
version = "0.1.0-SNAPSHOT"

def opentelemetryVersion = "1.40.0"
def opentelemetryInstrumentationVersion = "2.6.0"
def grpcVersion = "1.65.1"
def jacksonVersion = "2.17.2"
def protocVersion = "3.25.3"

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    Provider<Directory> output = layout.buildDirectory.dir("outputLocation")
    offlineCompile = output.get().asFile
}

dependencies {
    if (speed) {
        implementation fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        implementation platform("io.opentelemetry:opentelemetry-bom:${opentelemetryVersion}")
        implementation platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:${opentelemetryInstrumentationVersion}")
        implementation 'io.grpc:grpc-netty-shaded:1.63.0'
        implementation 'io.grpc:grpc-protobuf:1.63.0'
        implementation 'io.grpc:grpc-stub:1.63.0'
        implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
        implementation 'org.apache.logging.log4j:log4j-core:2.17.2'

        implementation "com.google.api.grpc:proto-google-common-protos:2.41.0"
        implementation "javax.annotation:javax.annotation-api:1.3.2"
        implementation "io.grpc:grpc-protobuf:${grpcVersion}"
        implementation "io.grpc:grpc-stub:${grpcVersion}"
        implementation "io.grpc:grpc-netty:${grpcVersion}"
        implementation "io.grpc:grpc-services:${grpcVersion}"
        implementation "io.opentelemetry:opentelemetry-api"
        implementation "io.opentelemetry:opentelemetry-sdk"
        implementation "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations"
        implementation "org.apache.logging.log4j:log4j-core:2.23.1"
        implementation "dev.openfeature.contrib.providers:flagd:0.8.4"
        implementation "dev.openfeature:sdk:1.9.0"

        runtimeOnly "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
        runtimeOnly "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        runtimeOnly "io.netty:netty-tcnative-boringssl-static:2.0.65.Final"
    }

    // âœ… Properly declared test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

test {
    useJUnitPlatform()
}

// Default protoSourceDir is in /opentelemetry-demo/pb. Optionally override the
// location for the docker build, which copies the protos to a different location.
def protoSourceDir = findProperty('protoSourceDir')?: project.projectDir.parentFile.parentFile.toPath().toString() + "/pb"
def protoDestDir = project.buildDir.toPath().toString() + "/proto"

// Copy protos to the build directory
tasks.register('copyProtos', Copy) {
    from protoSourceDir
    into protoDestDir
}

// Include the output directory of copyProtos in main source set so they are
// picked up by the protobuf plugin
sourceSets {
    main {
        proto {
            srcDir(protoDestDir)
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks { task ->
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

afterEvaluate {
    // Ensure protos are copy before classes are generated
    tasks.getByName('processResources').dependsOn 'copyProtos'
    tasks.getByName('generateProto').dependsOn 'copyProtos'
}

googleJavaFormat {
    toolVersion '1.18.1'
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'oteldemo'
            srcDirs 'build/generated/source/proto/main/java/oteldemo'
            srcDirs 'build/generated/source/proto/main/grpc/oteldemo'
        }
    }
}

startScripts.enabled = false

// This to cache dependencies during Docker image building. First build will take time.
// Subsequent build will be incremental.
task downloadRepos(type: Copy) {
    from configurations.compileClasspath
    into offlineCompile
    from configurations.runtimeClasspath
    into offlineCompile
}

task ad(type: CreateStartScripts) {
    mainClass.set('oteldemo.AdService')
    applicationName = 'Ad'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(ad)
    fileMode = 0755
}